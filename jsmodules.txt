JavaScript modules are reusable pieces of code that encapsulate functionality and can be imported and exported to other parts of 
a program. 
They help in organizing code, avoiding global namespace pollution, and making it easier to manage dependencies.

Key Concepts of JavaScript Modules
Export: A module can define pieces of code (variables, functions, classes) as "exports" so they can be reused in other files.

Named Export: Allows exporting multiple values.
Default Export: Exports a single value or a default function/class.
Import: Modules can "import" exports from other modules to use them.

Module Scope: Variables and functions in a module are scoped to that module unless explicitly exported.

Browser and Node.js Support:

In browsers, use <script type="module"> for modules.
In Node.js, modules are supported via CommonJS (require) or ES Modules (import/export).

Examples
1. Named Exports and Imports
math.js (module file):

export const add = (a, b) => a + b;
export const subtract = (a, b) => a - b;


app.js (using the module):

import { add, subtract } from './math.js';

console.log(add(2, 3));        // Output: 5
console.log(subtract(5, 3));   // Output: 2


2. Default Export and Import
greet.js:

export default function greet(name) {
    return `Hello, ${name}!`;
}


app.js:

import greet from './greet.js';

console.log(greet('John'));  // Output: Hello, John!


3. Combining Named and Default Exports
utils.js:

export const capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);
export const lowercase = (str) => str.toLowerCase();

export default function logMessage(message) {
    console.log(message);
}
app.js:
import logMessage, { capitalize, lowercase } from './utils.js';

logMessage(capitalize('hello'));  // Output: Hello
logMessage(lowercase('WORLD'));  // Output: world


4. Renaming Imports and Exports
math.js:

export const multiply = (a, b) => a * b;
export const divide = (a, b) => a / b;


app.js:

import { multiply as mul, divide as div } from './math.js';

console.log(mul(4, 2));  // Output: 8
console.log(div(4, 2));  // Output: 2


5. Import All
constants.js:
export const PI = 3.14;
export const E = 2.71;

app.js:
import * as constants from './constants.js';

console.log(constants.PI); // Output: 3.14
console.log(constants.E);  // Output: 2.71

6. Dynamic Imports
Dynamic imports allow modules to be loaded conditionally or on demand.

app.js:

if (someCondition) {
    import('./math.js').then((math) => {
        console.log(math.add(2, 3)); // Output: 5
    }).catch((error) => {
        console.error('Error loading module:', error);
    });
}


7. Modules in HTML
Modules can be used directly in the browser:

index.html:
<!DOCTYPE html>
<html>
<head>
    <title>JS Modules</title>
    <script type="module" src="app.js"></script>
</head>
<body>
    <h1>JavaScript Modules</h1>
</body>
</html>


app.js:

import { add } from './math.js';

console.log(add(10, 20));  // Output: 30


Benefits of Using Modules
Code Reusability: Write code once and use it in multiple places.
Improved Maintainability: Encapsulation of functionality makes the codebase easier to maintain.
Avoid Global Scope Pollution: Each module has its own scope, reducing conflicts.
Lazy Loading: Dynamic imports load code only when needed, improving performance.